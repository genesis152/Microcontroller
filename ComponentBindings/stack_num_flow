--merge 03/05

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use tip.all;

entity pc_stack_flow is
	port(
	CLK1:in std_logic;
	FLOW_CONST:in std_logic_vector(7 downto 0);
	FLOW_COMMAND:in std_logic_vector(3 downto 0);
	FLOW_SELECT :in std_logic_vector(3 downto 0);
	ADR : out std_logic_vector(7 downto 0));
end pc_stack_flow;

architecture nope of pc_stack_flow is

component Flow 	  
	port(FLOW_K : in std_logic_vector(7 downto 0);
			 COM: in std_logic_vector(3 downto 0);
			COND: in std_logic_vector(3 downto 0);
		   CARRY: in std_logic;
		   
		   ZERO : in std_logic;
	COUNTER_LOAD: out std_logic_vector(7 downto 0);
	STACK_POP	: out STD_LOGIC;
	STACK_PUSH  : out STD_LOGIC;
	jump,call,returnn:out std_logic;
			CLK : in STD_LOGIC);
end component;

component program_stack 
	port(STACK_IN: in std_logic_vector(7 downto 0);
	    STACK_OUT: out std_logic_vector(7 downto 0);
		EN_IN: in std_logic;
		EN_OUT:in std_logic;
		CLK   :in std_logic);
end component;

component PROGRAM_COUNTER 
	port(jump,call,returnn: in STD_LOGIC;
	STACK_IN: in STD_LOGIC_VECTOR(7 downto 0);
	FLOW_IN : in STD_LOGIC_VECTOR(7 downto 0);
	COUNT   : out STD_LOGIC_VECTOR(7 downto 0);
	DELAY_C : out STD_LOGIC_VECTOR(7 downto 0);
	CLK     : in STD_LOGIC);
end component;

signal pop1,push1: std_logic;
signal flow_load1: std_logic_vector(7 downto 0);
signal stack_load1: std_logic_vector(7 downto 0);
signal jump1,call1,returnn1:std_logic;
signal adress1 : std_logic_vector(7 downto 0);
signal delayed_count: std_logic_vector(7 downto 0);


begin
	--                FLOW_K         ,COM,       COND,  CARRY,ZERO,COUNTER_LOAD,STACK_POP,STACK_PUSH,jump,call,returnn
	l0: Flow port map(FLOW_CONST,FLOW_COMMAND,FLOW_SELECT,'0','0',flow_load1,pop1,push1,jump1,call1,returnn1,CLK1);
	                           --jump  ,call,returnn, STACK_IN,   FLOW_IN,  COUNT,  CLK
	l1: PROGRAM_COUNTER port map(jump1,call1,returnn1,stack_load1,flow_load1,adress1,delayed_count,CLK1);
						--   STACK_IN, STACK_OUT,EN_IN,EN_OUT
	l2: program_stack port map(delayed_count,stack_load1,push1,pop1,CLK1);
	ADR<=adress1;
end architecture;
